repo.parameters <- paste0("per_page=100&sort=created&access_token=", token)
query.url <- paste0(repo.base, repo.parameters)
data.repo <- fromJSON(query.url)
#Data processing
data.repo <- flatten(data.repo)
num_repos <- nrow(data.base)
most_popular <- filter(data.repo, forks_count == max(forks_count)) %>%
select(name) %>% as.character(.)
data.base$items$avatar_url
user.image <- as.character(data.base$items$avatar_url[1])
num_repos <- nrow(data.repo)
num_repos <- as.integer(nrow(data.repo))
num_repos <- nrow(data.repo)
View(data.repo)
test <- as.Date(data.repo$created_at)
head(test)
data.repo$date <- as.Date(data.repo$created_at)
data.frame(id=data.repo$id, name=data.repo$name, description=data.repo$description, url=data.repo$html_url,  date=data.repo$date)
```
data.repo$date <- as.Date(data.repo$created_at)
data.table <- data.frame(id=data.repo$id, name=data.repo$name, description=data.repo$description, url=data.repo$html_url,  date=data.repo$date)
```
View(data.table)
package.install("knitr")
install.packages("knitr")
install.packages("knitr")
View(data.repo)
View(data.table)
View(data)
View(data.repo)
View(data.repo)
library(dplyr)
library(jsonlite)
library(knitr)
library(ggplot2)
p1 <- ggplot(data.repo, aes(x=forks, y=watchers, group=language))
p1 + geom_point() + geom_smooth()
p1 <- ggplot(data.repo, aes(x=forks, y=log(watchers), group=language))
p1 + geom_point() + geom_smooth()
p1 <- ggplot(data.repo, aes(x=forks, y=log(watchers), group=language))
p1 + geom_point()
p1 <- ggplot(data.repo, aes(x=forks, y=watchers, group=language))
p1 + geom_point()
p1 <- ggplot(data.repo, aes(x=forks, y=size, group=language))
p1 + geom_point()
p1 <- ggplot(data.repo, aes(x=forks, y=size/max(size), group=language))
p1 + geom_point()
p1 <- ggplot(data.repo, aes(x=forks, y=size))
p1 + geom_point()
Sys.Date()
Sys.Date() - data.repo$date[1]
x <- Sys.Date() - data.repo$date[1]
x
difftime(Sys.Date(), data.base@date[1], units="days")
data.base@date[1]
difftime(Sys.Date(), data.base$date[1], units="days")
data.base$date[1]
data.repo$date[1]
difftime(Sys.Date(), data.repo$date[1], units="days")
difftime(Sys.Date(), data.repo$date[1], units="days", format = "%d")
difftime(Sys.Date(), data.repo$date[1], units="days", format = "%D")
difftime(Sys.Date(), data.repo$date[1], units="days", format = "%d")
difftime(Sys.Date(), data.repo$date[1], units="days", format = "%H:%M")
difftime(Sys.Date(), data.repo$date[1], units="days")
as.numeris(difftime(Sys.Date(), data.repo$date[1], units="days"))
as.numeric(difftime(Sys.Date(), data.repo$date[1], units="days"))
p1 <- ggplot(data.repo, aes(x=forks, y=as.numeric(difftime(Sys.Date(), date, units="days"))
))
p1 + geom_point()
p1 <- ggplot(data.repo, aes(x=forks, y=watchers))
p1 + geom_point()
user.github <- "mbostock"
user.base <- "https://api.github.com/search/users?"
token <- "8ee4ad31d954d29a77d7c22d0add7d24f15e1bce"
user.parameters <- paste0("q=", user.github, "&access_token=", token)
query.url <- paste0(user.base, user.parameters)
data.base <- fromJSON(query.url)
library(dplyr)
library(jsonlite)
library(knitr)
library(ggplot2)
#User search
user.github <- "mbostock"
user.base <- "https://api.github.com/search/users?"
token <- "8ee4ad31d954d29a77d7c22d0add7d24f15e1bce"
user.parameters <- paste0("q=", user.github, "&access_token=", token)
query.url <- paste0(user.base, user.parameters)
data.base <- fromJSON(query.url)
base.url <- "http://www.omdbapi.com/?"
movie <- "Lord of the Rings: The Fellowship of the Ring"
movie.no.spaces <- gsub(" ", "+", movie)
parameters <- paste("t=", move.no.spaces, "&","r=json")
request <- paste(base.url, parameters)
movie.data <- fromJSON(request)
base.url <- "http://www.omdbapi.com/?"
movie <- "Lord of the Rings: The Fellowship of the Ring"
movie.no.spaces <- gsub(" ", "+", movie)
parameters <- paste("t=", move.no.spaces, "&","r=json")
parameters <- paste("t=", movie.no.spaces, "&","r=json")
request <- paste(base.url, parameters)
movie.data <- fromJSON(request)
user.github <- "facebook"
user.base <- "https://api.github.com/search/users?"
token <- "8ee4ad31d954d29a77d7c22d0add7d24f15e1bce"
user.parameters <- paste0("q=", user.github, "&access_token=", token)
query.url <- paste0(user.base, user.parameters)
data.base <- fromJSON(query.url)
user.github <- "mbostock"
user.base <- "https://api.github.com/search/users?"
token <- "8ee4ad31d954d29a77d7c22d0add7d24f15e1bce"
user.parameters <- paste0("q=", user.github)
query.url <- paste0(user.base, user.parameters)
data.base <- fromJSON(query.url)
View(data)
View(data.table)
View(data.repo)
repo.base <- paste0(data.base$items$repos_url[1],"?")
repo.parameters <- paste0("per_page=100&sort=created&access_token=", token)
query.url <- paste0(repo.base, repo.parameters)
data.repo <- fromJSON(query.url)
library(dplyr)
library(jsonlite)
library(knitr)
library(ggplot2)
repo.base <- paste0(data.base$items$repos_url[1],"?")
repo.parameters <- paste0("per_page=100&sort=created&access_token=", token)
query.url <- paste0(repo.base, repo.parameters)
data.repo <- fromJSON(query.url)
View(data.repo)
#Data processing
data.repo <- flatten(data.repo)
num_repos <- nrow(data.repo)
most_popular <- filter(data.repo, forks_count == max(forks_count)) %>%
select(name) %>% as.character(.)
user.image <- as.character(data.base$items$avatar_url[1])
```
## Github Repo Data Summary
Some data exploration was done on the github user *`r user.github`*,
an image of this user can be seen below. Currently this user has `r num_repos` different repositories and his most popular repository currently is `r most_popular`. More summary statistics can be seen in the tables below. Table 1 contains info about the different repos, while table 2 summarises some statistics about the programming languages used in all the repos.
![An image of user `r user.github`.](`r user.image` "An image of user `r user.github`")
```{r table, echo=FALSE, include=FALSE}
library(dplyr)
library(ggplot2)
hover.time <- c(2.91, 3.04, 2.80, 3.03, 2.87, 2.30, 2.29, 2.27, 2.14, 2.21, 3.78, 3.77, 3.63, 3.61, 3.74)
treatment <- c(rep("1:1",5), rep("1:2",5), rep("2:1", 5))
df <- data.frame(hover.time, treatment)
p1 <- ggplot(df, aes(x=treatment, y=hover.time, groups=treatment))
p1 + geom_boxplot()
p1 <- ggplot(df, aes(x=treatment, y=hover.time))
p1 + geom_boxplot()
p1 <- ggplot(df, aes(x=treatment, y=hover.time))
p1 + geom_boxplot() + labs(list(title = "Box plot of hovertimes for each of the different paper helicopters", y = "hover time (sec)"))
data <- c(rep(4.6,4),rep(4.3,4),rep(4.4,4),rep(4.7,4),rep(4.8,4),rep(6.2,4))
lm <- c(rep("Ford",4),rep("Chev",4),rep("Nissan",4),rep("Lincoln",4),rep("Cad",4),rep("Merc",4))
x <- c(rep("Ford",4),rep("Chev",4),rep("Nissan",4),rep("Lincoln",4),rep("Cad",4),rep("Merc",4))
data <- c(rep(4.6,4),rep(4.3,4),rep(4.4,4),rep(4.7,4),rep(4.8,4),rep(6.2,4))
x <- c(rep("Ford",4),rep("Chev",4),rep("Nissan",4),rep("Lincoln",4),rep("Cad",4),rep("Merc",4))
F.obs <- anova(lm(data~as.factor(x)))
F.obs
x <- factor(c(rep("Ford",4),rep("Chev",4),rep("Nissan",4),rep("Lincoln",4),rep("Cad",4),rep("Merc",4)))
F.obs <- anova(lm(data~x))
y <- tapply(data,x,mean)
y
s2.t <- tapply(data,x,var)
SSE <- 2.25
SST <- n*sum((ybar.t-mean(data))^2)
n <- 24
m <- 6
SST <- n*sum((ybar.t-mean(data))^2)
ybar.t <- tapply(data,x,mean)
s2.t <- tapply(data,x,var)
SST <- n*sum((ybar.t-mean(data))^2)
SSE <- 2.25
MSE <- SSE/(m*(n-1))
MST <- SST/(m-1)
F.obs <- MST/MSE
SSE <- 2.25
SST <- n*sum((ybar.t-mean(data))^2)
MSE <- SSE/(m*(n-1))
MST <- SST/(m-1)
F.obs <- MST/MSE
n <- 4
m <- 6
ybar.t <- tapply(data,x,mean)
s2.t <- tapply(data,x,var)
SSE <- 2.25
SST <- n*sum((ybar.t-mean(data))^2)
MSE <- SSE/(m*(n-1))
MST <- SST/(m-1)
F.obs <- MST/MSE
F.obs <- anova(lm(y~as.factor(x)))
y <- c(1.055,1.272,.824,1.019,1.069,.983,1.025,1.076,1.100,
1.131,1.236,1.161,1.219,1.169,1.238,1.197,1.252,1.435,.827,3.188,
.798,.971,.923,1.079,1.065,
.950,.978,.762,.733,.823,1.011)
x <- c(rep("bag",9), rep("smoke",11),rep("plant1",5),rep("plant2",6))
F.obs <- anova(lm(y~as.factor(x)))
y <- c(1.055,1.272,.824,1.019,1.069,.983,1.025,1.076,1.100,
1.131,1.236,1.161,1.219,1.169,1.238,1.197,1.252,1.435,.827,3.188,
.798,.971,.923,1.079,1.065,
.950,.978,.762,.733,.823,1.011)
x <- c(rep("bag",9), rep("smoke",11),rep("plant1",5),rep("plant2",6))
F.obs <- anova(lm(y~as.factor(x)))
F.obs$`Sum Sq`
F.obs$Df
tapply(y,x,sum)
tapply(y,x,mean)
tapply(y,x,residuals)
residuals(F.obs)
calcResid <- function(data) {
data.mean <- mean(data)
error.resid <- rep(0,length(data))
n <- 1
for (val in data) {
error.resid[n] <- val-data.mean
n <- n+1
}
}
y[x == "bag"]
resid1 <- calcResid(y[x=="bag"])
resid2 <- calcResid(y[x=="smoke"])
resid3 <- calcResid(y[x=="plant1"])
resid4 <- calcResid(y[x=="plant2"])
temp <- y[x == "bag"]
temp[1]
temp[2]
mean(y[x=="bag"])
for (i in temp) {}
for (i in temp) {i}
temp[2]
length(temp)
calcResid <- function(data) {
data.mean <- mean(data)
error.resid <- rep(0,length(data))
for (n in 1:length(data)) {
error.resid[n] <- data[n]-data.mean
}
return(error.resid)
}
resid1 <- calcResid(y[x=="bag"])
resid2 <- calcResid(y[x=="smoke"])
resid3 <- calcResid(y[x=="plant1"])
resid4 <- calcResid(y[x=="plant2"])
hist(resid1)
hist(resid1)
hist(resid2)
hist(resid3)
hist(resid4)
hist(resid1, main="bag residuals")
hist(resid2, main="smoke residuals")
hist(resid3, main="plant 1 residuals")
hist(resid4, main="plant 2 residuals")
qqplot(resid1)
qqplot(resid1)
qqplot(y=resid1)
t <- rt(200, df = 5)
t
qqplot(t,resid1)
qqplot(rt(200, df = 7), resid1)
qqplot(rt(200, df = 9), resid2)
qqplot(rt(200, df = 3), resid3)
qqplot(rt(200, df = 4), resid4)
normal.quantiles1 <- qnorm(probabilities, mean(resid1, na.rm = T), sd(resid1, na.rm = T))
normal.quantiles1 <- qnorm(1:length(resid1)/(length(resid1)+1), mean(resid1, na.rm = T), sd(resid1, na.rm = T))
normal.quantiles2 <- qnorm(1:length(resid2)/(length(resid2)+1), mean(resid2, na.rm = T), sd(resid2, na.rm = T))
normal.quantiles3 <- qnorm(1:length(resid3)/(length(resid3)+1), mean(resid3, na.rm = T), sd(resid3, na.rm = T))
normal.quantiles4 <- qnorm(1:length(resid4)/(length(resid4)+1), mean(resid4, na.rm = T), sd(resid4, na.rm = T))
plot(sort(normal.quantiles1), sort(resid1) , xlab = 'Theoretical Quantiles from Normal Distribution', ylab = 'Sample Quanatiles of Ozone', main = 'Normal Quantile-Quantile Plot of Ozone')
plot(sort(normal.quantiles2), sort(resid2) , xlab = 'Theoretical Quantiles from Normal Distribution', ylab = 'Sample Quanatiles of Ozone', main = 'Normal Quantile-Quantile Plot of Ozone')
plot(sort(normal.quantiles3), sort(resid3) , xlab = 'Theoretical Quantiles from Normal Distribution', ylab = 'Sample Quanatiles of Ozone', main = 'Normal Quantile-Quantile Plot of Ozone')
plot(sort(normal.quantiles4), sort(resid4) , xlab = 'Theoretical Quantiles from Normal Distribution', ylab = 'Sample Quanatiles of Ozone', main = 'Normal Quantile-Quantile Plot of Ozone')
abline(0,1)
plot(sort(normal.quantiles1), sort(resid1) , xlab = 'Theoretical Quantiles from Normal Distribution', ylab = 'Sample Quanatiles of Ozone', main = 'Normal Quantile-Quantile Plot of Ozone')
abline(0,1)
plot(sort(normal.quantiles2), sort(resid2) , xlab = 'Theoretical Quantiles from Normal Distribution', ylab = 'Sample Quanatiles of Ozone', main = 'Normal Quantile-Quantile Plot of Ozone')
abline(0,1)
plot(sort(normal.quantiles3), sort(resid3) , xlab = 'Theoretical Quantiles from Normal Distribution', ylab = 'Sample Quanatiles of Ozone', main = 'Normal Quantile-Quantile Plot of Ozone')
abline(0,1)
plot(sort(normal.quantiles4), sort(resid4) , xlab = 'Theoretical Quantiles from Normal Distribution', ylab = 'Sample Quanatiles of Ozone', main = 'Normal Quantile-Quantile Plot of Ozone')
abline(0,1)
hist(resid1, main="bag residuals")
hist(resid2, main="smoke residuals")
hist(resid3, main="plant 1 residuals")
hist(resid1, main="bag residuals")
hist(resid2, main="smoke residuals")
hist(resid3, main="plant 1 residuals")
hist(resid4, main="plant 2 residuals")
hist(y[x=="bag"], main="hist bad")
hist(y[x=="smoke"], main="hist smoke")
hist(y[x=="plant1"], main="hist plant 1")
hist(y[x=="plant2"], main="hist plant 2")
install.package("shiny")
install.packages("shiny")
library(shiny)
data <- data(iris)
iris
View(iris)
iris[,Species]
iris[,Species]
iris[,"Species"]
runApp('D:/Program File/Git/info201/a8-building-apps-FeardaMeow')
df.iris <- group_by(iris, Species) %>%
summarise(Sepal.Length = mean(Sepal.Length), Sepal.Width = mean(Sepal.Width),
Petal.Length = mean(Petal.Length), Petal.Width = mean(Petal.Width))
library(dplyr)
df.iris <- group_by(iris, Species) %>%
summarise(Sepal.Length = mean(Sepal.Length), Sepal.Width = mean(Sepal.Width),
Petal.Length = mean(Petal.Length), Petal.Width = mean(Petal.Width))
View(df.iris)
runApp('D:/Program File/Git/info201/a8-building-apps-FeardaMeow')
runApp('D:/Program File/Git/info201/a8-building-apps-FeardaMeow')
runApp('D:/Program File/Git/info201/a8-building-apps-FeardaMeow')
?barplot(df.iris[,input$flower],
main=input$flower,
ylab="cm",
xlab="Species")
barplot(df.iris[,input$flower],
main=input$flower,
ylab="cm",
xlab="Species")
barplot(df.iris[,"Sepal.Width"],
main="Sepal.Width",
ylab="cm",
xlab="Species")
df.iris[,"Sepal.Width"]
as.vector(df.iris[,"Sepal.Width"])
vector(df.iris[,"Sepal.Width"])
as.vector(df.iris[,"Sepal.Width"])
x<-as.vector(df.iris[,"Sepal.Width"])
is.vector(x)
is.data.frame(df.iris)
df.iris$"Sepal.Width"
runApp('D:/Program File/Git/info201/a8-building-apps-FeardaMeow')
runApp('D:/Program File/Git/info201/a8-building-apps-FeardaMeow')
parse("x")
runApp('D:/Program File/Git/info201/a8-building-apps-FeardaMeow')
input$flower <- "Sepal.Width"
eval(parse(text = input$flower))
input.flower <- "Sepal.Width"
eval(parse(text = input.flower))
df.iris$input.flower
df.iris$eval(input.flower)
x <- 42
eval(parse(text = "x"))
eval(parse(text = "input.flower"))
runApp('D:/Program File/Git/info201/a8-building-apps-FeardaMeow')
df.iris$eval(parse(text = "input.flower"))
df.iris$ eval(parse(text = "input.flower"))
df.iris[,eval(parse(text = "input.flower"))]
df.iris[,eval(parse(text = "input.flower"))]
as.vector(df.iris[,eval(parse(text = "input.flower"))])
as.vector(iris[,eval(parse(text = "input.flower"))])
View(df.iris)
View(df)
View(df.iris)
View(iris)
View(df.iris)
df.iris %>% select(Sepal.Width)
iris %>% select(Sepal.Width)
df.iris <- group_by(iris, Species) %>%
summarise(Sepal.Length = mean(Sepal.Length), Sepal.Width = mean(Sepal.Width),
Petal.Length = mean(Petal.Length), Petal.Width = mean(Petal.Width))
df.iris
data.frame(df.iris)
runApp('D:/Program File/Git/info201/a8-building-apps-FeardaMeow')
runApp('D:/Program File/Git/info201/a8-building-apps-FeardaMeow')
runApp('D:/Program File/Git/info201/a8-building-apps-FeardaMeow')
df.iris[,1]
df.iris[,1]
df.iris[,1]
df.iris[,1]
df.iris[,1]
df.iris <- data.frame(df.iris)
df.iris
df.iris[,1]
barplot(df.iris[,input$flower],
df.iris[,1],
main=input$flower,
ylab="cm",
xlab="Species")
runApp('D:/Program File/Git/info201/a8-building-apps-FeardaMeow')
runApp('D:/Program File/Git/info201/a8-building-apps-FeardaMeow')
library(ggplot2)
p.barplot <- ggplot(df.iris, aes(Sepal.Length, groups=Species))
p.barplot + geom_bar()
p.barplot <- ggplot(df.iris, aes(Sepal.Width, groups = Species))
p.barplot + geom_bar()
p.barplot <- ggplot(df.iris, aes(Sepal.Width, group = Species))
p.barplot + geom_bar()
p.barplot <- ggplot(df.iris, aes(Species, Sepal.Width))
p.barplot + geom_bar()
p.barplot <- ggplot(df.iris, aes(x=Species, y=Sepal.Width, group=Species))
p.barplot + geom_bar()
p.barplot <- ggplot(df.iris, aes(y=Sepal.Width, group=Species))
p.barplot + geom_bar()
p.barplot <- ggplot(df.iris, aes(factor(Species),Sepal.Width, group=Species))
p.barplot + geom_bar()
p.barplot <- ggplot(df.iris, aes(x=Species, y=Sepal.Length, group=Species))
p.barplot + geom_bar()
p.barplot <- ggplot(iris, aes(x=Species, y=Sepal.Length, group=Species))
p.barplot + geom_bar()
p.barplot <- ggplot(iris, aes(x=Species, y=Sepal.Length, group=Species))
# Render a barplot
p.barplot + geom_bar()
iris
df.iris <- iris
p.barplot <- ggplot(df.iris, aes(x=Species, y=Sepal.Length, group=Species))
p.barplot + geom_bar()
p.barplot <- ggplot(df.iris, aes(x=Species, y=Sepal.Length))
p.barplot + geom_bar()
p.barplot <- ggplot(df.iris, aes(Sepal.Length, group=Species))
# Render a barplot
p.barplot + geom_bar()
p.barplot <- ggplot(df.iris, aes(mean(Sepal.Length), group=Species))
# Render a barplot
p.barplot + geom_bar()
p.barplot <- ggplot(df.iris, aes(Sepal.Length, group=Species))
# Render a barplot
p.barplot + geom_bar()
p.barplot <- ggplot(df.iris, aes(x=Sepal.Length, y=Sepal.Width), subset= .(Species == 'setosa'))
p.barplot + geom_bar()
p.barplot <- ggplot(df.iris, aes(x=Sepal.Length, y=Sepal.Width), subset= .(Species == 'setosa'))
p.barplot + geom_point()
runApp('D:/Program File/Git/info201/a8-building-apps-FeardaMeow')
runApp('D:/Program File/Git/info201/a8-building-apps-FeardaMeow')
subset(df.iris, Species=="Sepal.Length")
subset(df.iris, Species=="setosa")
runApp('D:/Program File/Git/info201/a8-building-apps-FeardaMeow')
runApp('D:/Program File/Git/info201/a8-building-apps-FeardaMeow')
runApp('D:/Program File/Git/info201/a8-building-apps-FeardaMeow')
runApp('D:/Program File/Git/info201/a8-building-apps-FeardaMeow')
runApp('D:/Program File/Git/info201/a8-building-apps-FeardaMeow')
runApp('D:/Program File/Git/info201/a8-building-apps-FeardaMeow')
runApp('D:/Program File/Git/info201/a8-building-apps-FeardaMeow')
input.param1 <- "Sepal.Length"
input.param2 <- "Sepal.Width"
df.iris <- eval(select(Species, input.param1, input.param2) %>% rename(param1=input.param1, param2=input.param2))
df.iris <- eval(select(df.iris, Species, input.param1, input.param2) %>% rename(param1=input.param1, param2=input.param2))
df.iris <- eval(select(df.iris, Species, input.param1, input.param2) %>% rename(param1=input.param1, param2=input.param2))
df.iris <- eval(select(df.iris, Species, parse(text="input.param1"), parse(text="input.param2")))
parse(text="input.param1")
eval(parse(text="input.param1"))
df.iris <- eval(select(df.iris, Species, eval(parse(text="input.param1")), eval(parse(text="input.param2"))))
df.iris <- eval(select_(df.iris, Species, eval(parse(text="input.param1")), eval(parse(text="input.param2"))))
df.iris <- select_(df.iris, Species, eval(parse(text="input.param1")), eval(parse(text="input.param2")))
df.iris <- select_(df.iris, "Species", eval(parse(text="input.param1")), eval(parse(text="input.param2")))
runApp('D:/Program File/Git/info201/a8-building-apps-FeardaMeow')
df.iris <- select_(df.iris, "Species", eval(parse(text="input.param1")), eval(parse(text="input.param2"))) %>%
rename_("param1"=eval(parse(text="input.param1")), "param2"=eval(parse(text="input.param2")))
View(df.iris)
runApp('D:/Program File/Git/info201/a8-building-apps-FeardaMeow')
runApp('D:/Program File/Git/info201/a8-building-apps-FeardaMeow')
df.iris <- iris
runApp('D:/Program File/Git/info201/a8-building-apps-FeardaMeow')
runApp('D:/Program File/Git/info201/a8-building-apps-FeardaMeow')
runApp('D:/Program File/Git/info201/a8-building-apps-FeardaMeow')
p.barplot <- ggplot(subset(df.iris, Species==input$species), aes(x=as.name(input.param1), y=as.name(input.param2)))
p.barplot <- ggplot(subset(df.iris, Species==input$species), aes(x=eval(as.name(input.param1)), y=eval(as.name(input.param2))))
p.barplot <- ggplot(subset(df.iris, Species==setosa), aes(x=eval(as.name(input.param1)), y=eval(as.name(input.param2))))
p.barplot <- ggplot(subset(df.iris, Species=="setosa"), aes(x=eval(as.name(input.param1)), y=eval(as.name(input.param2))))
# Render a barplot
p.barplot + geom_point()
runApp('D:/Program File/Git/info201/a8-building-apps-FeardaMeow')
runApp('D:/Program File/Git/info201/a8-building-apps-FeardaMeow')
install.packages('rsconnect')
rsconnect::setAccountInfo(name='feardameow',
token='23BBE722F9119D8C3F8A772A1A4A785B',
secret='fvnFBif8E/CpwIz5y9mbYclUbfMMkuH8G+dd3tUw')
library(rsconnect)
library(rsconnect)
install.packages('rsconnect')
install.packages('rsconnect')
install.packes("rsconnect")
install.packages("rsconnect")
install.packages("rsconnect")
install.packages('rsconnect')
install.packages('rsconnect')
install.packages('rsconnect')
install.packages('rsconnect')
install.packages("rsconnect", type = "source")
install.packages("PKI")
install.packages('rsconnect')
D:/Program File/R-3.3.1/bin/x64/R" CMD INSTALL -l
"D:/Program File/R-3.3.1/bin/x64/R" CMD INSTALL -l
'"D:/Program File/R-3.3.1/bin/x64/R" CMD INSTALL -l "D:\Program File\R-3.3.1\library" C:\Users\SHWAN_~1\AppData\Local\Temp\Rtmpmsf17N/downloaded_packages/rsconnect_0.6.tar.gz'
'"D://Program File//R-3.3.1//bin//x64//R" CMD INSTALL -l "D:\\Program File\R-3.3.1\library" C:\Users\SHWAN_~1\AppData\Local\Temp\Rtmpmsf17N/downloaded_packages/rsconnect_0.6.tar.gz'
'"D:/Program File/R-3.3.1/bin/x64/R" CMD INSTALL -l "D:\Program File\R-3.3.1\library" C:\Users\SHWAN_~1\AppData\Local\Temp\Rtmpmsf17N/downloaded_packages/rsconnect_0.6.tar.gz'
'"D:/Program File/R-3.3.1/bin/x64/R" CMD INSTALL -l "D:\\Program File\\R-3.3.1\\library" C:\\Users\\SHWAN_~1\\AppData\\Local\\Temp\\Rtmpmsf17N/downloaded_packages/rsconnect_0.6.tar.gz'
install.packages('rsconnect')
if (!require("devtools"))
install.packages("devtools")
devtools::install_github("rstudio/rsconnect")
install.packages("rsconnect")
install.packages("C:\Users\shwan_000\AppData\Local\Temp\RtmpUxd4Wx\downloaded_packages", repos = NULL, type="source")
install.packages("C:\\Users\\shwan_000\\AppData\\Local\\Temp\\RtmpUxd4Wx\\downloaded_packages\\rsconnect_0.6.tar.gz", repos = NULL, type="source")
install.packages("rsconnect")
library(dplyr)
library(jsonlite)
wd <- "D:\\Program File\\Git\\info201\\info201-team1-finalproject"
setwd(wd)
data <- read.csv("data\\MERGED2014_15_PP.csv")
data <- select(data, CITY, STABBR, INSTNM, MAIN, INSTURL, UGDS, ADM_RATE, SAT_AVG, ACTCMMID,
TUITIONFEE_IN, TUITIONFEE_OUT, C150_4) %>%
filter(MAIN==1)
library(Amelia)
missmap(data)
View(data)
is.null(data$UGDS)
sapply(data,function(x) sum(x=="NULL"))
View(data)
data <- read.csv("data\\MERGED2014_15_PP.csv")
View(data)
