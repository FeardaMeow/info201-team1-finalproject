---
```{r, echo=FALSE, message=FALSE}
### Exercise 1 ###
install.packages("ggpplot")
library(knitr)
library(jsonlite)
library(dplyr)
library(rmarkdown)
# User connection & Data Gathering
github.user.name <- "mbostock"
base.url <- "https://api.github.com/users/"
access.token <- "access_token=3d2cbb5b6f304adf4f0abf5abc2249bb37640f55"
request <- paste0(base.url, github.user.name,"?", access.token)
github.user.data <- fromJSON(request)
#retrieve repo url from user data
url <- github.user.data$repos_url[1]
#Create Query for data
result <- paste0(url, "?",access.token, "&page=1&per_page=100&sort=created_at+desc")
github.user.repos <- fromJSON(result)
user.repos <- flatten(github.user.repos)
num_repos <- nrow(user.repos)
# retreive most popular repo and get the string from the dataframe
most_popular <- filter(user.repos, user.repos$forks_count == max(user.repos$forks_count, na.rm = FALSE))[1,2]
avatar.url <- user.repos$owner.avatar_url[1]
#Information below is about the user.
```
#`r github.user.name`
![](`r avatar.url`)\
The number of repositories this user has is `r num_repos` and the most popular repository of this user is `r most_popular`
```{r, echo=FALSE, message=FALSE}
#Formats date and puts it into a new column in the user repo
user.repos$Time_Stamp_Made <- strptime(user.repos$created_at, tz = "UTC", "%Y-%m-%dT%H:%M:%OSZ")
#Create new table with 4 columns for later
table.data <- data.frame(Repository_Name = user.repos$full_name, Number_of_Forks = user.repos$forks_count, Language = user.repos$language, Date_Made = user.repos$Time_Stamp_Made)# Add date created
```
```{r, echo=FALSE, message=FALSE}
#Table creation
kable(table.data)
summary_table <- group_by(table.data, Language) %>%
summarise(Average_Forks = mean(Number_of_Forks, na.rm = FALSE), Total_Repository_Count =        n_distinct(Repository_Name))
kable(summary_table)
#Challenge
hist()
```
---
author: "Andrew Bayles"
title: "Assignment 5"
output: html_document
---
```{r, echo=FALSE, message=FALSE}
### Exercise 1 ###
install.packages("ggpplot")
library(knitr)
library(jsonlite)
library(dplyr)
library(rmarkdown)
# User connection & Data Gathering
github.user.name <- "mbostock"
base.url <- "https://api.github.com/users/"
access.token <- "access_token=3d2cbb5b6f304adf4f0abf5abc2249bb37640f55"
request <- paste0(base.url, github.user.name,"?", access.token)
github.user.data <- fromJSON(request)
#retrieve repo url from user data
url <- github.user.data$repos_url[1]
#Create Query for data
result <- paste0(url, "?",access.token, "&page=1&per_page=100&sort=created_at+desc")
github.user.repos <- fromJSON(result)
user.repos <- flatten(github.user.repos)
num_repos <- nrow(user.repos)
# retreive most popular repo and get the string from the dataframe
most_popular <- filter(user.repos, user.repos$forks_count == max(user.repos$forks_count, na.rm = FALSE))[1,2]
avatar.url <- user.repos$owner.avatar_url[1]
#Information below is about the user.
```
#`r github.user.name`
![](`r avatar.url`)\
The number of repositories this user has is `r num_repos` and the most popular repository of this user is `r most_popular`
```{r, echo=FALSE, message=FALSE}
#Formats date and puts it into a new column in the user repo
user.repos$Time_Stamp_Made <- strptime(user.repos$created_at, tz = "UTC", "%Y-%m-%dT%H:%M:%OSZ")
#Create new table with 4 columns for later
table.data <- data.frame(Repository_Name = user.repos$full_name, Number_of_Forks = user.repos$forks_count, Language = user.repos$language, Date_Made = user.repos$Time_Stamp_Made)# Add date created
```
```{r, echo=FALSE, message=FALSE}
#Table creation
kable(table.data)
summary_table <- group_by(table.data, Language) %>%
summarise(Average_Forks = mean(Number_of_Forks, na.rm = FALSE), Total_Repository_Count =        n_distinct(Repository_Name))
kable(summary_table)
#Challenge
View(user.repos)
hist(user.repos$forks, xlab = "Repositories", ylab = "# of Forks", ylim = c(0,200))
hist(user.repos$forks, xlab = "Repositories", ylab = "# of Forks", ylim = c(0,50))
boxplot(user.repos$forks ~ user.repos$watchers,              # x variable, y variable
notch = T,                                     # Draw notch
las = 1,                                       # Orientate the axis tick labels
xlab = "Forks",                              # X-axis label
ylab = "Watchers",                         # Y-axis label
main = "Fork count to Watcher Count",      # Plot title
cex.lab = 1.5,                                 # Size of axis labels
cex.axis = 1.5,                                # Size of the tick mark labels
cex.main = 2)
hist(user.repos$forks, xlab = "Repositories", ylab = "# of Forks", ylim = c(0,50))
hist(user.repos$forks, xlab = "Repositories", ylab = "# of Forks", ylim = c(0,50), main = "Graph of # of Forks")
hist(user.repos$forks, xlab = "Repositories", ylab = "# of Forks", xlim = (0,40),ylim = c(0,50), main = "Graph of # of Forks")
```
hist(user.repos$forks, xlab = "Repositories", ylab = "# of Forks", xlim = (0,40),ylim = c(0,50), main = "Graph of # of Forks")
```
hist(user.repos$forks, xlab = "Repositories", ylab = "# of Forks", xlim = (40),ylim = c(0,50), main = "Graph of # of Forks")
hist(user.repos$forks, xlab = "Repositories", ylab = "# of Forks", xlim = (0,40),ylim = c(0,50), main = "Graph of # of Forks")
```
hist(user.repos$forks, xlab = "Repositories", ylab = "# of Forks", xlim = (0 ,40),ylim = c(0,50), main = "Graph of # of Forks")
hist(user.repos$forks, xlab = "Repositories", ylab = "# of Forks", xlim = (0 ,40),ylim = c(0,50), main = "Graph of # of Forks", breaks = 40)
```
hist(user.repos$forks, xlab = "Repositories", ylab = "# of Forks",ylim = c(0,50), main = "Graph of # of Forks", breaks = 40)
hist(user.repos$watchers, xlab = "Repositories", ylab = "# of Watchers",ylim = c(0,50), main = "Graph of # of Watchers per repository", breaks = 40)
```
boxplot(user.repos$forks ~ user.repos$watchers,              # x variable, y variable
notch = T,                                     # Draw notch
las = 1,                                       # Orientate the axis tick labels
xlab = "Forks",                              # X-axis label
ylab = "Watchers",                         # Y-axis label
main = "Fork count to Watcher Count",      # Plot title
cex.lab = 1.5,                                 # Size of axis labels
cex.axis = 1.5,                                # Size of the tick mark labels
cex.main = 2)
boxplot(user.repos$forks ~ user.repos$watchers,              # x variable, y variable
notch = F,                                     # Draw notch
las = 1,                                       # Orientate the axis tick labels
xlab = "Forks",                              # X-axis label
ylab = "Watchers",                         # Y-axis label
main = "Fork count to Watcher Count",      # Plot title
cex.lab = 1.5,                                 # Size of axis labels
cex.axis = 1.5,                                # Size of the tick mark labels
cex.main = 2)
boxplot(user.repos$forks ~ user.repos$watchers, notch = F,las = 1,xlab = "Forks", ylab = "Watchers",main = "Repository Fork count to Watcher Count",cex.lab = 1, cex.axis = 1, cex.main = 1.5)
user.repos <- flatten(github.user.repos) %>% arrange(desc(created_at))
user.repos <- flatten(github.user.repos) %>% arrange(created_at)
num_repos <- nrow(user.repos)
plot_geo(shooting.data, locationmode = 'USA-states', sizes = c(1, 250)) %>%
add_markers(
x = ~lng, y = ~lat, size = ~injured, color = ~killed, hoverinfo = "text",
text = ~paste0(shooting.data$date, "<br />", shooting.data$city,", ",shooting.data$state, "<br />", shooting.data$killed, " Dead", "<br />", shooting.data$injured, " Injured", "<br />")) %>%
layout(title = '2016 Mass Shootings in the USA<br>', geo = g)
title: "Mapping Shootings"
author: "Andrew Bayles"
date: "11/7/2016"
output: html_document
---
```{r, echo=FALSE, message=FALSE}
library(knitr)
library(dplyr)
library(rmarkdown)
library(plotly)
shooting.data <- read.csv("data/Mass-Shooting-Data.csv")
# Summary Information
#A paragraph explaining the most dangerous months of shooting.
deaths.total <- select(shooting.data, killed) %>%
summarise(sum(killed))
injuries.total <- select(shooting.data, injured) %>%
summarise(sum(injured))
city.total <- summarise(shooting.data, n_distinct(city) )
incidents.total <- nrow(shooting.data)
number.of.states <- summarise(shooting.data, n_distinct(state))
```
#Mass Shootings in 2016
This year has been marked as one where mass shootings are prevalent in our newsfeeds and our anxieties. In this year alone over `r city.total` cities in the United States have been affected by a mass shooting in 2016. The total number of people injured in these cities is `r injuries.total[1,1]`, and the number of people killed in these shootings are `r deaths.total[1,1]`. All of this occured in  `r incidents.total` different incidents accross the country.
```{r, echo=FALSE, message=FALSE}
summary.table.mass.shooting <- summarise(shooting.data ,Number_Of_States = number.of.states[1,1], Cities_Affected = city.total[1,1], Number_Of_Shootings = incidents.total, People_Injured  = injuries.total[1,1], People_Killed = deaths.total[1,1])
unique.story <- filter(shooting.data, injured == max(injured[], na.rm = FALSE), killed == max(killed[], na.rm = FALSE))
kable(summary.table.mass.shooting)
```
#The Most Deadly Shooting of 2016
Many people remember what happened on the night of `r unique.story[1,1]` in the city of `r unique.story[1,2]`, `r unique.story[1,3]`. It happened at Pulse, a nightclub known well to be a safe space for members of the gay community to enjoy a night out. A single gunman entered the establishment and injured `r unique.story[1,4]` and killed `r unique.story[1,5]` people just because of the people they love. This is truly the most heinous of the mass shootings this year because of the sheer number of people affected by the crime. A total of `r unique.story[1,5] + unique.story[1,4]` people, not to forget the number of family members and friends who will never see them again. It is important to reflect on the importance of fighting for equality to this day, the fight is not over.
```{r, echo=FALSE, message=FALSE, warning=FALSE}
# shooting.data$q <- with(shooting.data, cut(pop, quantile(pop)))
# levels(shooting.data$q) <- paste(c("1st", "2nd", "3rd", "4th", "5th"), "Quantile")
# shooting.data$q <- as.ordered(shooting.data$q)
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray85"),
subunitwidth = 1,
countrywidth = 1,
subunitcolor = toRGB("white"),
countrycolor = toRGB("white")
)
plot_geo(shooting.data, locationmode = 'USA-states', sizes = c(1, 250)) %>%
add_markers(
x = ~lng, y = ~lat, size = ~injured, color = ~killed, hoverinfo = "text",
text = ~paste0(shooting.data$date, "<br />", shooting.data$city,", ",shooting.data$state, "<br />", shooting.data$killed, " Dead", "<br />", shooting.data$injured, " Injured", "<br />")) %>%
layout(title = '2016 Mass Shootings in the USA<br>', geo = g)
```
An interactive map
The map should be appropriately labeled, and relevant information should be shown to the user when they hover over each point.
```{r , echo=FALSE, message=FALSE}
states <- group_by(shooting.data, state) %>%
summarise(total_killed = sum(killed), total_injured = sum(injured), people_affected = sum(killed)+sum(injured))
plot_ly(states, color = I("gray80")) %>%
add_segments(x = ~total_killed, xend = ~total_injured, y = ~state, yend = ~state, showlegend = FALSE) %>%
add_markers(x = ~total_killed, y = ~state, name = "Killed", color = I("red")) %>%
add_markers(x = ~total_injured, y = ~state, name = "Injured", color = I("blue")) %>%
layout(
title = "Mass Shootings by State",
xaxis = list(title = "Lives"),
yaxis = list(title = "States"),
margin = list(l = 85, autoexpand = TRUE)
)
```
An interactive plot of your choice
In addition to the interactive map, you will build an additional interactive plot of your choice. The plotly library has a ton of examples (Links to an external site.) that you can be inspired by. As you create your chart, be sure to consider what questions it answers for your audience. Similarly to your map, you should integrate your plot seamlessly with the rest of your report, and reference/describe it in your text.
Similarly to last week, we'll create a gh-pages branch so that our final product can be posted on the web.
---
title: "Mapping Shootings"
author: "Andrew Bayles"
date: "11/7/2016"
output: html_document
---
```{r, echo=FALSE, message=FALSE}
library(knitr)
library(dplyr)
library(rmarkdown)
library(plotly)
shooting.data <- read.csv("data/Mass-Shooting-Data.csv")
# Summary Information
#A paragraph explaining the most dangerous months of shooting.
deaths.total <- select(shooting.data, killed) %>%
summarise(sum(killed))
injuries.total <- select(shooting.data, injured) %>%
summarise(sum(injured))
city.total <- summarise(shooting.data, n_distinct(city) )
incidents.total <- nrow(shooting.data)
number.of.states <- summarise(shooting.data, n_distinct(state))
```
#Mass Shootings in 2016
This year has been marked as one where mass shootings are prevalent in our newsfeeds and our anxieties. In this year alone over `r city.total` cities in the United States have been affected by a mass shooting in 2016. The total number of people injured in these cities is `r injuries.total[1,1]`, and the number of people killed in these shootings are `r deaths.total[1,1]`. All of this occured in  `r incidents.total` different incidents accross the country.
```{r, echo=FALSE, message=FALSE}
summary.table.mass.shooting <- summarise(shooting.data ,Number_Of_States = number.of.states[1,1], Cities_Affected = city.total[1,1], Number_Of_Shootings = incidents.total, People_Injured  = injuries.total[1,1], People_Killed = deaths.total[1,1])
unique.story <- filter(shooting.data, injured == max(injured[], na.rm = FALSE), killed == max(killed[], na.rm = FALSE))
kable(summary.table.mass.shooting)
```
#The Most Deadly Shooting of 2016
Many people remember what happened on the night of `r unique.story[1,1]` in the city of `r unique.story[1,2]`, `r unique.story[1,3]`. It happened at Pulse, a nightclub known well to be a safe space for members of the gay community to enjoy a night out. A single gunman entered the establishment and injured `r unique.story[1,4]` and killed `r unique.story[1,5]` people just because of the people they love. This is truly the most heinous of the mass shootings this year because of the sheer number of people affected by the crime. A total of `r unique.story[1,5] + unique.story[1,4]` people, not to forget the number of family members and friends who will never see them again. It is important to reflect on the importance of fighting for equality to this day, the fight is not over.
```{r, echo=FALSE, message=FALSE, warning=FALSE}
# shooting.data$q <- with(shooting.data, cut(pop, quantile(pop)))
# levels(shooting.data$q) <- paste(c("1st", "2nd", "3rd", "4th", "5th"), "Quantile")
# shooting.data$q <- as.ordered(shooting.data$q)
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray85"),
subunitwidth = 1,
countrywidth = 1,
subunitcolor = toRGB("white"),
countrycolor = toRGB("white")
)
plot_geo(shooting.data, locationmode = 'USA-states', sizes = c(1, 250)) %>%
add_markers(
x = ~lng, y = ~lat, size = ~injured, color = ~killed, hoverinfo = "text",
text = ~paste0(shooting.data$date, "<br />", shooting.data$city,", ",shooting.data$state, "<br />", shooting.data$killed, " Dead", "<br />", shooting.data$injured, " Injured", "<br />")) %>%
layout(title = '2016 Mass Shootings in the USA<br>', geo = g)
```
An interactive map
The map should be appropriately labeled, and relevant information should be shown to the user when they hover over each point.
```{r , echo=FALSE, message=FALSE}
states <- group_by(shooting.data, state) %>%
summarise(total_killed = sum(killed), total_injured = sum(injured), people_affected = sum(killed)+sum(injured))
plot_ly(states, color = I("gray80")) %>%
add_segments(x = ~total_killed, xend = ~total_injured, y = ~state, yend = ~state, showlegend = FALSE) %>%
add_markers(x = ~total_killed, y = ~state, name = "Killed", color = I("red")) %>%
add_markers(x = ~total_injured, y = ~state, name = "Injured", color = I("blue")) %>%
layout(
title = "Mass Shootings by State",
xaxis = list(title = "Lives"),
yaxis = list(title = "States"),
margin = list(l = 85, autoexpand = TRUE)
)
```
plot_ly(states, color = I("gray80")) %>%
add_segments(x = ~total_killed, xend = ~total_injured, y = ~state, yend = ~state, showlegend = FALSE) %>%
add_markers(x = ~total_killed, y = ~state, name = "Killed", color = I("red")) %>%
add_markers(x = ~total_injured, y = ~state, name = "Injured", color = I("blue")) %>%
layout(
title = "Mass Shootings by State",
xaxis = list(title = "Lives"),
yaxis = list(title = "States"),
margin = list(l = 100, autoexpand = TRUE)
)
title: "Mapping Shootings"
author: "Andrew Bayles"
date: "11/7/2016"
output: html_document
---
```{r, echo=FALSE, message=FALSE}
library(knitr)
library(dplyr)
library(rmarkdown)
library(plotly)
shooting.data <- read.csv("data/Mass-Shooting-Data.csv")
# Summary Information
#A paragraph explaining the most dangerous months of shooting.
deaths.total <- select(shooting.data, killed) %>%
summarise(sum(killed))
injuries.total <- select(shooting.data, injured) %>%
summarise(sum(injured))
city.total <- summarise(shooting.data, n_distinct(city) )
incidents.total <- nrow(shooting.data)
number.of.states <- summarise(shooting.data, n_distinct(state))
```
#Mass Shootings in 2016
This year has been marked as one where mass shootings are prevalent in our newsfeeds and our anxieties. In this year alone over `r city.total` cities in the United States have been affected by a mass shooting in 2016. The total number of people injured in these cities is `r injuries.total[1,1]`, and the number of people killed in these shootings are `r deaths.total[1,1]`. All of this occured in  `r incidents.total` different incidents accross the country.
```{r, echo=FALSE, message=FALSE}
summary.table.mass.shooting <- summarise(shooting.data ,Number_Of_States = number.of.states[1,1], Cities_Affected = city.total[1,1], Number_Of_Shootings = incidents.total, People_Injured  = injuries.total[1,1], People_Killed = deaths.total[1,1])
unique.story <- filter(shooting.data, injured == max(injured[], na.rm = FALSE), killed == max(killed[], na.rm = FALSE))
kable(summary.table.mass.shooting)
```
#The Most Deadly Shooting of 2016
Many people remember what happened on the night of `r unique.story[1,1]` in the city of `r unique.story[1,2]`, `r unique.story[1,3]`. It happened at Pulse, a nightclub known well to be a safe space for members of the gay community to enjoy a night out. A single gunman entered the establishment and injured `r unique.story[1,4]` and killed `r unique.story[1,5]` people just because of the people they love. This is truly the most heinous of the mass shootings this year because of the sheer number of people affected by the crime. A total of `r unique.story[1,5] + unique.story[1,4]` people, not to forget the number of family members and friends who will never see them again. It is important to reflect on the importance of fighting for equality to this day, the fight is not over.
```{r, echo=FALSE, message=FALSE, warning=FALSE}
# shooting.data$q <- with(shooting.data, cut(pop, quantile(pop)))
# levels(shooting.data$q) <- paste(c("1st", "2nd", "3rd", "4th", "5th"), "Quantile")
# shooting.data$q <- as.ordered(shooting.data$q)
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray85"),
subunitwidth = 1,
countrywidth = 1,
subunitcolor = toRGB("white"),
countrycolor = toRGB("white")
)
plot_geo(shooting.data, locationmode = 'USA-states', sizes = c(1, 250)) %>%
add_markers(
x = ~lng, y = ~lat, size = ~injured, color = ~killed, hoverinfo = "text",
text = ~paste0(shooting.data$date, "<br />", shooting.data$city,", ",shooting.data$state, "<br />", shooting.data$killed, " Dead", "<br />", shooting.data$injured, " Injured", "<br />")) %>%
layout(title = '2016 Mass Shootings in the USA<br>', geo = g)
```
This visual representation of shootings across the United States is displayed by the size and the color of the markers on the map. The size of the marker is directly correlated to the number of people injured in the incident and the color of the marker is how many people were killed. Float your cursor over the markers to find out more about individual incidents.
```{r , echo=FALSE, message=FALSE}
states <- group_by(shooting.data, state) %>%
summarise(total_killed = sum(killed), total_injured = sum(injured), people_affected = sum(killed)+sum(injured))
plot_ly(states, color = I("gray80")) %>%
add_segments(x = ~total_killed, xend = ~total_injured, y = ~state, yend = ~state, showlegend = FALSE) %>%
add_markers(x = ~total_killed, y = ~state, name = "Killed", color = I("red")) %>%
add_markers(x = ~total_injured, y = ~state, name = "Injured", color = I("blue")) %>%
layout(
title = "Mass Shootings by State",
xaxis = list(title = "Lives"),
yaxis = list(title = "States"),
margin = list(l = 100, autoexpand = TRUE)
)
length <- paste0("Petal", ".Length")
width <- paste0("Petal", ".Width")
user.df <- filter(iris, Species == "setosa") %>%
select_(length,width)
library(dplyr)
library(plotly)
library(shiny)
user.df <- filter(iris, Species == "setosa") %>%
select_(length,width)
View(user.df)
runApp('/Applications/XAMPP/xamppfiles/htdocs/info201/a8-building-apps-baylesa')
runApp('/Applications/XAMPP/xamppfiles/htdocs/info201/a8-building-apps-baylesa')
runApp('/Applications/XAMPP/xamppfiles/htdocs/info201/a8-building-apps-baylesa')
runApp('/Applications/XAMPP/xamppfiles/htdocs/info201/a8-building-apps-baylesa')
install.packages("shiny")
install.packages("shiny")
library(shiny)
# Define UI for an application that has a title
shinyUI(
# Specify a fluidPage layout (most common)
fluidPage(                 # Create a title in your fluidPage
titlePanel("Hello Shiny!"),
sidebarLayout(
sidebarPanel(
# Copy the line below to make a set of radio buttons
radioButtons("radio", label = h3("Species"),
choices = list("Setosa" = "setosa", "Versicolor" = 'versicolor', "Virginica" = 'virginica'),
selected = "setosa"),
selectInput("select", label = h3("Petal or Sepal"),
choices = list("Petal" = "Petal", "Sepal" = "Sepal"),
selected = "petal")
),
mainPanel(
textOutput("radioValue"),
textOutput("selectValue")
)
)
)
)
library(shiny)
library(dplyr)
library(plotly)
# Define server logic required to draw a histogram
shinyServer(function(input, output) {
# You can access the values of the widget (as a vector)
# with input$radio, e.g.
output$radioValue <- renderPrint({input$radio})
output$selectValue <- renderPrint({input$select})
user.input.select <- renderPrint({input$select})
user.input.radio <- renderPrint({input$radio})
length <- paste0(user.input.select, ".Length")
width <- paste0(user.input.select, ".Width")
user.df <- filter(iris, Species == user.input.radio) %>%
select_(length,width)
#output$plot <- plot_ly(user.df)
})
runApp('/Applications/XAMPP/xamppfiles/htdocs/info201/a8-building-apps-baylesa')
runApp('/Applications/XAMPP/xamppfiles/htdocs/info201/a8-building-apps-baylesa')
runApp('/Applications/XAMPP/xamppfiles/htdocs/info201/a8-building-apps-baylesa')
runApp('/Applications/XAMPP/xamppfiles/htdocs/info201/a8-building-apps-baylesa')
runApp('/Applications/XAMPP/xamppfiles/htdocs/info201/a8-building-apps-baylesa')
runApp('/Applications/XAMPP/xamppfiles/htdocs/info201/a8-building-apps-baylesa')
runApp('/Applications/XAMPP/xamppfiles/htdocs/info201/a8-building-apps-baylesa')
runApp('/Applications/XAMPP/xamppfiles/htdocs/info201/a8-building-apps-baylesa')
runApp('/Applications/XAMPP/xamppfiles/htdocs/info201/a8-building-apps-baylesa')
runApp('/Applications/XAMPP/xamppfiles/htdocs/info201/a8-building-apps-baylesa')
runApp('/Applications/XAMPP/xamppfiles/htdocs/info201/a8-building-apps-baylesa')
runApp('/Applications/XAMPP/xamppfiles/htdocs/info201/a8-building-apps-baylesa')
runApp('/Applications/XAMPP/xamppfiles/htdocs/info201/a8-building-apps-baylesa')
runApp('/Applications/XAMPP/xamppfiles/htdocs/info201/a8-building-apps-baylesa')
runApp('/Applications/XAMPP/xamppfiles/htdocs/info201/a8-building-apps-baylesa')
shiny::runApp('/Applications/XAMPP/xamppfiles/htdocs/info201/a8-building-apps-baylesa')
runApp('/Applications/XAMPP/xamppfiles/htdocs/info201/a8-building-apps-baylesa')
runApp('/Applications/XAMPP/xamppfiles/htdocs/info201/a8-building-apps-baylesa')
runApp('/Applications/XAMPP/xamppfiles/htdocs/info201/a8-building-apps-baylesa')
runApp('/Applications/XAMPP/xamppfiles/htdocs/info201/a8-building-apps-baylesa')
runApp('/Applications/XAMPP/xamppfiles/htdocs/info201/a8-building-apps-baylesa')
runApp('/Applications/XAMPP/xamppfiles/htdocs/info201/a8-building-apps-baylesa')
runApp('/Applications/XAMPP/xamppfiles/htdocs/info201/m14-shiny/exercise-4')
runApp('/Applications/XAMPP/xamppfiles/htdocs/info201/a8-building-apps-baylesa')
runApp('/Applications/XAMPP/xamppfiles/htdocs/info201/a8-building-apps-baylesa')
runApp('/Applications/XAMPP/xamppfiles/htdocs/info201/a8-building-apps-baylesa')
runApp('/Applications/XAMPP/xamppfiles/htdocs/info201/a8-building-apps-baylesa')
runApp('/Applications/XAMPP/xamppfiles/htdocs/info201/a8-building-apps-baylesa')
runApp('/Applications/XAMPP/xamppfiles/htdocs/info201/a8-building-apps-baylesa')
runApp('/Applications/XAMPP/xamppfiles/htdocs/info201/a8-building-apps-baylesa')
runApp('/Applications/XAMPP/xamppfiles/htdocs/info201/a8-building-apps-baylesa')
runApp('/Applications/XAMPP/xamppfiles/htdocs/info201/a8-building-apps-baylesa')
runApp('/Applications/XAMPP/xamppfiles/htdocs/info201/a8-building-apps-baylesa')
runApp('/Applications/XAMPP/xamppfiles/htdocs/info201/a8-building-apps-baylesa')
install.packages('rsconnect')
install.packages("rsconnect")
install.packages("rsconnect")
install.packages("rsconnect")
install.packages("rsconnect")
rsconnect::setAccountInfo(name='baylesa', token='035936311E52D5A8C2167E8893D25F87', secret='X7hxLu2UZkkdo9HDPT+/02oxcY3/YqMHnSZP0W7a')
library(rsconnect)
rsconnect::setAccountInfo(name='baylesa', token='035936311E52D5A8C2167E8893D25F87', secret='X7hxLu2UZkkdo9HDPT+/02oxcY3/YqMHnSZP0W7a')
rsconnect::deployApp('/Applications/XAMPP/xamppfiles/htdocs/info201/a8-building-apps-baylesa')
shiny::runApp('/Applications/XAMPP/xamppfiles/htdocs/info201/info201-team1-finalproject/info201-final')
setwd("/Applications/XAMPP/xamppfiles/htdocs/info201/info201-team1-finalproject/info201-final")
runApp()
install.packages("leaflet")
)
library(leaflet)
runApp()
install.packages("leaflet")
shiny::runApp()
runApp()
df <- read.csv("data/data.csv")
setwd("/Applications/XAMPP/xamppfiles/htdocs/info201/info201-team1-finalproject/info201-final")
df <- read.csv("data/data.csv")
df <- read.csv("data/data.csv")
setwd("/Applications/XAMPP/xamppfiles/htdocs/info201/info201-team1-finalproject")
df <- read.csv("data/data.csv")
runApp()
View(college.data)
college.data <- read.csv("data/data.csv", header = TRUE)
View(college.data)
output$mymap <- renderLeaflet({
leaflet(college.data) %>% addMarkers(lng = ~LONGITUDE, lat = ~LATITUDE, popup = INSTNM)%>%
addProviderTiles("Stamen.TonerLite",
options = providerTileOptions(noWrap = TRUE)
)
})
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
